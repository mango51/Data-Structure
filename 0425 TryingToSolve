#include <stdio.h>
#include <stdlib.h>
#include <string.h>



struct employee{
	char name[10];
	int year;
	int pay;
};

struct student{
	char name[10];
	int kor;
	int eng;
	int math;
	float avg;
	int sum;
};

typedef struct student2{
	char name[20];
	int kor, eng, math;
	int sum;
	float avg;
} Student;

typedef struct score{
	int kor, eng, math;
	int sum;
} Score;

//struct emp{	} em1;
//struct emp em2;
//typedef struct employee Emp; //데이터 타입 정의

void main(){
	/*char* ptr;
	int i;*/

	//struct employee kim = {"김사원", 1999, 7500}; // 구조체 변수 초기화
	//struct employee lee,park;	//구조체 변수 3개 선언 (위의 kim은 선언 동시에 초기화)
	////오류!!! kim.name = "김사원"; >> 상수 "김사원"을 주소(배열의 이름은 주소, kim.name)에 넣을 수 없음
	//
	//strcpy(lee.name, "이사원");
	//lee.year = 2010;		//year는 배열[]이 아니라서 주소값이 아님! 그래서 2010 넣을 수 있음 (int형이라서)
	//lee.pay= 5000;

	//strcpy(park.name,"박사원");
	//park.year=2019;
	//park.pay = 2800;

	//printf("사원 정보 출력\n\n");
	//printf("이름 : %s\n", kim.name);
	//printf("입사 : %d년\n", kim.year);
	//printf("연봉 : %d만원\n", kim.pay);
	//printf("\n");
	//printf("이름 : %s\n", lee.name);
	//printf("입사 : %d년\n", lee.year);
	//printf("연봉 : %d만원\n", lee.pay);
	//printf("\n");
	//printf("이름 : %s\n", park.name);
	//printf("입사 : %d년\n", park.year);
	//printf("연봉 : %d만원\n", park.pay);
	//printf("\n");
	// 서로 다른 데이터 타입이라 같은 배열 안에 넣어서 for문으로 돌릴 수가 없음


	// 문제1. 학생 3명의 점수를 입력 받은 후 정보를 출력해보세요.
	// 학생은 학생 이름, 국어, 영어, 수학, 총점, 평균 점수 정보 갖고 있음

	//밑의 코드 내가 했지만 오류 뜸 >> 해결하기 (선생님 코드와 비교하기)
	//struct student all[3];
	//for(i=0;i<3;i++){
	//	printf("학생 %d의 이름 : ", i+1);
	//	gets(ptr);
	//	strcpy(all[i].name,ptr);
	//	printf("학생 %d의 국어 점수 : ",i+1);
	//	scanf("%d",&all[i].kor);
	//	printf("학생 %d의 영어 점수 : ",i+1);
	//	scanf("%d",&all[i].eng);
	//	printf("학생 %d의 수학 점수 : ",i+1);
	//	scanf("%d",&all[i].math);
	//	all[i].avg = (all[i].kor+all[i].eng+all[i].math)/3;
	//	all[i].sum =(all[i].kor+all[i].eng+all[i].math);
	//}
	//for(i=0;i<3;i++){
	//	printf("학생 %d의 총점 : %d" , i+1,all[i].sum);
	//	printf("학생 %d의 평균 : %.1f",i+1,all[i].avg);
	//}


	// 배열로 해보기 (선생님 코드)
	//Student st[3];

	//  포인터로 해보기 (선생님 코드)
	// 주소를 가지고 참조하기 : (ptr+i)->sum 
	// 간접 접근 멤버 연산자 : -> (주소를 가지고 간접적으로 접근하기)


	// 문제2. 학생 수를 입력 받아 입력 받은 학생 수 만큼의 정보를 저장하기 위한 메모리 공간을 동적 할당 받아서 출력하기
	// 동적 할당을 통해 자원 아껴쓸 수 있음 ( 효율적으로 메모리 관리할 수 있음)
	// 학생 수 입력 : 
	// 국어 : 
	// 영어 : 
	// 수학 : 
	// 점수 출력
	// 이름 국 영 수 총점 평균
	Student * ptr;
	int i, num;
	printf("학생 수 입력 : ");
	scanf("%d", &num);
	fflush(stdin);
	ptr = (Student*)malloc(num*sizeof(Student));	//Student * 타입 ptr에 메모리 할당
	if(ptr==NULL){
		printf("메모리 할당 실패! \n");
		return;
	}
	printf("\n학생 정보 입력 \n");
	for(i=0;i<num;i++){
		fflush(stdin);
		printf("%d번 학생 이름",i+1);

// 


	}
}
